package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"sync"
)

type Client struct {
	Data []string
	mu   sync.Mutex
}

type Server struct {
	Data []string
	mu   sync.Mutex
}

var (
	cl  = &Client{}
	srv = &Server{}
)

func (cli *Client) clientReadHandler(w http.ResponseWriter, r *http.Request) {
	cli.mu.Lock()
	if len(cli.Data) > 0 {
		fmt.Fprint(w, cli.Data[0])
		log.Printf("Reading client data: %s", cli.Data[0])
		cli.Data = cli.Data[1:]
	} else {
		fmt.Fprint(w, "")
	}
	cli.mu.Unlock()
}

func (cli *Client) clientWriteHandler(w http.ResponseWriter, r *http.Request) {
	d := r.PostFormValue("d")
	if d == "" {
		return
	}
	srv.mu.Lock()
	srv.Data = append(srv.Data, d)
	log.Printf("Writing client data: %s", d)
	srv.mu.Unlock()
}

func (srv *Server) serverReadHandler(w http.ResponseWriter, r *http.Request) {
	srv.mu.Lock()
	if len(srv.Data) > 0 {
		fmt.Fprint(w, srv.Data[0])
		log.Printf("Reading server data: %s", srv.Data[0])
		srv.Data = srv.Data[1:]
	} else {
		fmt.Fprint(w, "")
	}
	srv.mu.Unlock()
}

func (srv *Server) serverWriteHandler(w http.ResponseWriter, r *http.Request) {
	d := r.PostFormValue("d")
	if d == "" {
		b, err := io.ReadAll(r.Body)
		if err != nil {
			log.Fatal(err)
		}
		log.Printf("%s", b)

		return
	}
	cl.mu.Lock()
	cl.Data = append(cl.Data, d)
	log.Printf("Writing server data: %s", d)
	cl.mu.Unlock()
}

func main() {
	http.HandleFunc("/client/read", cl.clientReadHandler)
	http.HandleFunc("/client/write", cl.clientWriteHandler)
	http.HandleFunc("/server/read", srv.serverReadHandler)
	http.HandleFunc("/server/write", srv.serverWriteHandler)

	log.Println("Starting external server on 127.0.0.1:8080")
	log.Fatal(http.ListenAndServe("127.0.0.1:8080", nil))
}
